[
  { 
    "name":"empty",
    "signature":" empty() : Boolean",       
    "isVisible": true,
    "tooltip": "Información tootltip",
    "category": "existence",
    "example": [
        "<span>Devuelve <code>false</code> el recurso conditión tiene valores</span><code>Condition.empty()</code>",
        "<span>Devuelde <code>false</code> el atributo id tiene valor</span><code>Condition.id.empty()</code>"
    ],
    "info": "Devuelve <code>true</code> si la colección de entrada está vacia y <code>false</code> en caso contrario"
  },
  { "name":"not",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "not() : Boolean",
    "example": [
        "<span>Devuelve <code>true</code> el recurso conditión tiene valores</span><code>Condition.empty().not()</code>",
        "<span>Devuelde <code>false</code> el atributo id tiene valor</span><code>Condition.id.empty().not()</code>"
    ],
    "info": "Devuelve <code>true</code> si la colección de entrada se evalúa como <code>false</code>, y <code>false</code> si se evalúa como <code>true</code>. De lo contrario, el resultado está vacío <code>({ })</code>"
  },
  { "name":"exists",
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "exists([criteria : expression]) : Boolean",
    "example": [
        "<span>Devuelve <code>true</code> si Patient tiene algún name elemento.</span><code>Patient.name.exists()</code>",
        "<span>Devuelve <code>true</code> si Patient tiene algún identifier elemento que tenga un use elemento igual a \"official\".</span><code>Patient.identifier.exists(use = \"official\")</code>",
        "<span>Devuelve <code>true</code> si Patient tiene algún telecom elemento que tenga un system elemento igual a \"phone\"y un use elemento igual a \"mobile\".</span><code>Patient.telecom.exists(system = \"phone\" and use = \"mobile\")</code>",
        "<span>Devuelve <code>true</code> si Patient tiene algún general Practitioner elemento de tipo Practitioner.</span><code>Patient.generalPractitioner.exists($this is Practitioner)</code>"
    ],
    "info": "<p>Devuelve <code>true</code> si la colección tiene algún elemento y <code>false</code> en caso contrario. Esto es lo opuesto a <code class=\"code-function\">empty()</code> y como tal es una abreviatura de <code class=\"code-function\">empty().not()</code>. Si la colección de entrada está vacía <code>({ })</code>, el resultado es <code>false</code></p><p>La función también puede tomar criterios opcionales que se aplicarán a la colección antes de determinar la existencia. En este caso, la función es una abreviatura de <code class=\"code-function\">where(criteria).exists()</code>.</p><p>Tenga en cuenta que un término común para esta función es cualquiera.</p>"
  },
  { "name":"all",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "all(criteria : expression) : Boolean",
    "example":["<span>Devuelve <code>true</code> si todos los general Practitioner elementos son de tipo Practitioner.</span><code>generalPractitioner.all($this is Practitioner)</code>"],
    "info": "<p>Devuelve <code>true</code> si para cada elemento de la colección de entrada, criteria se evalúa como <code>true</code>. De lo contrario, el resultado es <code>false</code> Si la colección de entrada está vacía <code>({ })</code>, el resultado es <code>true</code>.</p>"
  },
  { "name":"allTrue",     
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "allTrue() : Boolean",
    "example": ["<span>Devuelve <code>true</code> si todos los componentes de la Observación tienen un valor superior a 90 mm[Hg]:</span><code>Observation.select(component.value > 90 \"mm[Hg]\").allTrue()</code>"],
    "info":"<p>Toma una colección de valores booleanos y devuelve <code>true</code> si todos los elementos son <code>true</code>. Si algún elemento es <code>false</code>, el resultado es <code>false</code> Si la entrada está vacía <code>({ })</code>, el resultado es <code>true</code><p>"
  },
  { "name":"anyTrue",     
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "anyTrue() : Boolean",
    "example": ["<span>El siguiente ejemplo devuelve <code>true</code> si alguno de los componentes de la Observación tiene un valor mayor a 90 mm[Hg]:</span><code>Observation.select(component.value > 90 \"mm[Hg]\").anyTrue()</code>"],
    "info" : "<p>Toma una colección de valores booleanos y devuelve <code>true</code> si alguno de los elementos es <code>true</code>. Si todos los elementos son <code>false</code>, o si la entrada está vacía <code>({ })</code>, el resultado es <code>false</code></p>"
  },
  { "name":"allFalse",    
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature":"allFalse() : Boolean",
    "example":["<span>Devuelve <code>true</code> si ninguno de los componentes de la Observación tiene un valor mayor a 90 mm[Hg]</span><code>Observation.select(component.value > 90 \"mm[Hg]\").allFalse()</code>"],
    "info":"<p>Toma una colección de valores booleanos y devuelve <code>true</code> si todos los elementos son <code>false</code> Si algún elemento lo es true, el resultado es <code>false</code> Si la entrada está vacía <code>({ })</code>, el resultado es <code>true</code>.</p>"

  },
  { "name":"anyFalse",    
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "anyFalse(): Boolean",
    "example":["<span>Devuelve <code>true</code> si alguno de los componentes de la Observación tiene un valor que no es mayor a 90 mm[Hg]</span><code>Observation.select(component.value > 90 \"mm[Hg]\").anyFalse()</code>"],
    "info": "<p>Toma una colección de valores booleanos y devuelve <code>true</code> si alguno de los elementos es <code>false</code>. Si todos los elementos son true, o si la entrada está vacía <code>( { })</code>, el resultado es <code>false</code></p>"
  },
  { "name":"subsetOf",    
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "subsetOf(other : collection) : Boolean",
    "example": ["<span>El siguiente ejemplo devuelve verdadero si las etiquetas definidas en cualquier recurso contenido son un subconjunto de las etiquetas definidas en el recurso MedicationRequest</span><code>MedicationRequest.contained.meta.tag.subsetOf(MedicationRequest.meta.tag)</code>"],
    "info": "<p>Devuelve <code>true</code> si todos los elementos de la colección de entrada son miembros de la colección pasada como otherargumento. La membresía se determina mediante la operación = (Igual a) ( =).</p><p>Conceptualmente, esta función se evalúa probando cada elemento de la colección de entrada para determinar su pertenencia a la otra colección, con un valor predeterminado de <code>true</code>. Esto significa que si la colección de entrada está vacía <code>({ })</code>, el resultado es <code>true</code>; de lo contrario, si la othercolección está vacía <code>({ })</code>, el resultado es <code>false</code></p>"
  },
  { "name":"supersetOf",  
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "supersetOf(other : collection) : Boolean",
    "example":["<span>El siguiente ejemplo devuelve verdadero si las etiquetas definidas en cualquier recurso contenido son un superconjunto de las etiquetas definidas en el recurso MedicationRequest</span><code>MedicationRequest.contained.meta.tag.supersetOf(MedicationRequest.meta.tag)</code>"],
    "info":"<p>Devuelve <code>true</code> si todos los elementos de la colección pasados ​​como otherargumento son miembros de la colección de entrada. La membresía se determina mediante la operación = (Igual a) ( =).</p><p>Conceptualmente, esta función se evalúa probando la otra pertenencia de cada elemento de la colección a la colección de entrada, con un valor predeterminado de <code>true</code>. Esto significa que si la otra colección está vacía <code>({ })</code>, el resultado es <code>true</code>; de lo contrario, si la colección de entrada está vacía <code>({ })</code>, el resultado es <code>false</code></p>"
  },
  { "name":"isDistinct",  
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "isDistinct() : Boolean",
    "example": ["<span>Esto significa que si la colección de entrada está vacía <code>( { })</code>, el resultado es verdadero.</span><code>X.count() = X.distinct().count()</code>"],
    "info":"<p>Devuelve <code>true</code> si todos los elementos de la colección de entrada son distintos. Para determinar si dos elementos son distintos, se utiliza el operador <code>= (Equals) (=)</code>, como se define a continuación.</p>"
  },
  { "name":"distinct",
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "distinct() : collection",
    "example": ["<span>Devuelve la lista distinta de etiquetas en el Paciente dado</span><code>Patient.meta.tag.distinct()</code>"],
    "info": "<p>Devuelve una colección que contiene sólo los elementos únicos de la colección de entrada. Para determinar si dos elementos son iguales, se utiliza el operador <code>= (Equals) (=)</code>, como se define a continuación.</p><p>Si la colección de entrada está vacía <code>( { })</code>, el resultado está vacío.</p>"    

  },
  { "name":"count",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "existence",
    "signature": "count() : Integer",
    "info": "<p>Devuelve el recuento entero del número de elementos de la colección de entrada. Devuelve 0 cuando la colección de entrada está vacía.</p>"
  },



  { "name":"where",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature": "where(criteria : expression) : collection",
    "example": ["<span>El siguiente ejemplo devuelve la lista de telecom elementos que tienen un useelemento con el valor de \"official\"</span><code>Patient.telecom.where(use = \"official\")</code>"],
    "info": "<p>Devuelve una colección que contiene sólo aquellos elementos de la colección de entrada para los cuales la expresión indicada se evalúa como <code>true</code>. Los elementos para los cuales la expresión se evalúa como <code>false</code> o está vacía <code>( { })</code> no se incluyen en el resultado.</p><p>Si la colección de entrada está vacía <code>( { })</code>, el resultado está vacío.</p><p>Si el resultado de la evaluación de la condición no es un valor booleano único, la evaluación finalizará y señalará un error al entorno de llamada, de manera consistente con la evaluación única del comportamiento de las colecciones.</p>"
  },
  { "name":"extension",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "filtering"
  },

  { "name":"select",      
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature": "select(projection: expression) : collection",
    "example": [
      "<span>Este ejemplo da como resultado una colección con solo los recursos del paciente del paquete.</span><code>Bundle.entry.select(resource as Patient)</code>",
      "<span>Este ejemplo da como resultado una colección con todos los elementos de telecom donde sistema es igual a \"phone\", para todos los pacientes del paquete.</span><code>Bundle.entry.select((resource as Patient).telecom.where(system = \"phone\"))</code>",
      "<span>Este ejemplo devuelve una colección que contiene, para cada nombre \"habitual\" del Paciente, la concatenación del primer nombre y el apellido.</span><code>Patient.name.where(use = \"usual\").select(given.first() + \" \" + family)</code>"
    ],
    "info": "<p>Evalúa la expresión de cada elemento de la colección de entrada. El resultado de cada evaluación se agrega a la colección de resultados. Si la evaluación da como resultado una colección con varios elementos, todos los elementos se agregan a la colección de salida (las colecciones resultantes de la evaluación se aplanan ). Esto significa que si la evaluación de un elemento da como resultado una colección vacía <code>( { })</code>, no se agrega ningún elemento al resultado, y que si la colección de entrada está vacía <code>( { })</code>, el resultado también está vacío.</p>"
  },
  { "name":"aggregate",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "aggregate",
    "signature": "aggregate(aggregator : expression [, init : value]) : value",
    "example": [],
    "info":""
  },
  { "name":"sum",         
    "isVisible": true, 
    "signature": "sum(): Integer", 
    "tooltip": "Información tootltip",
    "category": "aggregate",
    "example": ["<code>Patient.numbers.sum()</code>"],
    "info": "Obtiene la sumatoria de un conjunto de valores numéricos"
  },
  { "name":"min",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "aggregate",
    "signature": "min(): Integer",
    "example": ["<code>Patient.numbers.min()"],
    "info": "Obtiene el menor de un conjunto de valores numéricos"
  },
  { "name":"max",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "aggregate",
    "signature": "max() : Integer",
    "example": ["<code>Patient.numbers.max()</code>"],
    "info": "Obtiene el mayor de un conjunto de valores numéricos"
  },
  { "name":"avg",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "aggregate",
    "signature": "avg(): Integer",
    "example": ["<code>Patient.numbers.avg()</code>"],
    "info": "Obtiene la media de un conjunto de valores númericos"

  },
  { "name":"single",      
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature": "single(): collection",
    "example": ["<span>El siguiente ejemplo devuelve el nombre del paciente, si lo hay. Si no hay nombres, es una colección vacía y si hay varios nombres, se indica un error al entorno de evaluación.</span><code>Patient.name.single()</code>"],
    "info": "<p>Devolverá el único elemento en la entrada si solo hay un elemento. Si la colección de entrada está vacía <code>( { })</code>, el resultado está vacío. Si hay varios elementos, se señala un error al entorno de evaluación. Esta función es útil para garantizar que se devuelva un error si se infringe una suposición sobre la cardinalidad en tiempo de ejecución.</p>"
  },
  { "name":"first",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature": "first(): collection",
    "info": "<p>Devuelve una colección que contiene sólo el primer elemento de la colección de entrada. Esta función es equivalente a <code-function>item[0]</code-function>, por lo que devolverá una colección vacía si la colección de entrada no tiene elementos.</p>"
  },
  { "name":"last",        
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature": "last(): collection",
    "info": "<p>Devuelve una colección que contiene sólo el último elemento de la colección de entrada. Devolverá una colección vacía si la colección de entrada no tiene elementos.</p>"
  },
  { "name":"type",        
    "isVisible": false,
    "tooltip": "Información tootltip",
    "category":"math"
  },
  { "name":"ofType",      
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "filtering"
  },
  { "name":"is",          
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category":"math"
  },
  { "name":"as",          
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category":"math"
  },
  { "name":"tail",        
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature": "tail(): collection",
    "info": "<p>Devuelve una colección que contiene todos los elementos excepto el primero de la colección de entrada. Devolverá una colección vacía si la colección de entrada no tiene elementos o solo tiene uno.</p>"
  },
  { "name":"take",        
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature" : "take(num: Integer) : collection",
    "example": [
      "<span>Devuelve los primeros 2 elementos</span><code>Patient.numbers.take(2)</code>",
      "<span>Devuelve todos los elementos, menos el último</span><code>Patient.numbers.take(-1)</code>"
    ],
    "info": "<p>Devuelve una colección que contiene los primeros num elementos de la colección de entrada, o menos si hay menos de num elementos. Si num es menor o igual que 0, o si la colección de entrada está vacía <code>( { })</code>, take devuelve una colección vacía.</p>"
  },
  { "name":"skip",        
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature": "skip(num: Integer) : collection",
    "info":"<p>Devuelve una colección que contiene todos los num elementos excepto el primero de la colección de entrada. Devolverá una colección vacía si no quedan elementos después de que se haya omitido el número de elementos indicado, o si la colección de entrada está vacía. Si num es menor o igual a cero, simplemente se devuelve la colección de entrada.</p>"
  },
  { "name":"combine",     
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category":"combining"
  },
  { "name":"union",       
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category":"combining"  
  },
  { "name":"intersect",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category":"combining"   
  },
  { "name":"iif",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "misc",
    "signature": "iif(criterion: expression, true-result: collection [, otherwise-result: collection]) : collection",
    "example": [
      "<span>Devuelve el id si existe, en caso contrario devuelve una colección vacia</span><code>iif(Patient.id.exists(),Patient.id)</code>"
    ],
    "info" : "<p>La iif función en FHIRPath es un if inmediato , también conocido como operador condicional (como ? :el operador de C).</p><p>Se espera que la <code>criterion</code> expresión se evalúe como booleana.</p><p>Si <code>criterion</code> es verdadero, la función devuelve el valor del <code>true-result</code> argumento.</p><p>Si <code>criterion</code> es <code>false</code> o una colección vacía, la función devuelve <code>otherwise-result</code>, a menos que <code>otherwise-result</code> no se proporcione el opcional, en cuyo caso la función devuelve una colección vacía.</p>"
  },
  { "name":"trace",       
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toInteger",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toDecimal",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toString",    
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toDate",      
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toDateTime",  
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toTime",      
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toBoolean",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"toQuantity",  
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"hasValue",    
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToBoolean",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToInteger",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToDecimal",   
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToString",    
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToDate",      
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToDateTime",  
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToTime",      
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"convertsToQuantity",  
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "misc"
  },
  { "name":"indexOf",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "indexOf(substring : String) : Integer",
    "example":[
      "<code>\"abcdefg\".indexOf(\"bc\") <code-comment>// 1<code-comment></code>",
      "<code>\"abcdefg\".indexOf(\"x\") <code-comment>// -1<code-comment></code>",
      "<code>\"abcdefg\".indexOf(\"abcdefg\") <code-comment>// 0<code-comment></code>"
    ],
    "info": "<p>Devuelve el índice basado en 0 de la primera posición substringque se encuentra en la cadena de entrada, o -1 si no se encuentra.</p><p>Si substringes una cadena vacía ( \"\"), la función devuelve 0.</p><p>Si la entrada o substring está vacía <code>( { })</code>, el resultado está vacío <code>( { })</code>.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"

  },
  { "name":"substring",     
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "substring(start : Integer [, length : Integer]) : String",
    "example": [
      "<code>\"abcdefg\".substring(3) <code-comment>// \"defg\"</code-comment></code>",
      "<code>\"abcdefg\".substring(1, 2) <code-comment>// \"bc\"</code-comment></code>",
      "<code>\"abcdefg\".substring(6, 2) <code-comment>// \"g\"</code-comment></code>",
      "<code>\"abcdefg\".substring(7, 1) <code-comment>// { }</code-comment></code>"
    ],
    "info" : " "
  },
  { "name":"startsWith",    
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "startsWith(prefix : String) : Boolean",
    "example": [
      "<code>\"abcdefg\".startsWith(\"abc\") <code-comment>// true</code-comment></code>",
      "<code>\"abcdefg\".startsWith(\"xyz\") <code-comment>// false</code-comment></code>"
    ],
    "info" : "<p>Devuelve <code>true</code> cuando la cadena de entrada comienza con el valor dado como <code>prefix</code>.</p><p>Si prefix es una cadena vacía ( \"\"), el resultado es <code>true</code>.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"endsWith",      
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "endsWith(suffix : String) : Boolean",
    "example": [
      "<code>\"abcdefg\".endsWith(\"efg\") <code-comment>// true<code-comment></code>",
      "<code>\"abcdefg\".ednsWith(\"abc\") <code-comment>// false<code-comment></code>"
    ],
    "info" : "<p>Devuelve <code>true</code> cuando la cadena de entrada termina con el valor dado <code>suffix</code>.</p><p>Si <code>suffix</code> es la cadena vacía (\"\"), el resultado es <code>true</code>.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"contains",      
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "contains(substring : String) : Boolean",
    "example": [
      "<code>\"abc\".contains(\"b\") <code-comment>// true</code-comment></code>",
      "<code>\"abc\".contains(\"bc\") <code-comment>// true</code-comment></code>",
      "<code>\"abc\".contains(\"d\") <code-comment>// false</code-comment></code>"
    ],
    "info" : "<p>Devuelve <code>true</code> cuando lo dado substring es una subcadena de la cadena de entrada.</p><p>Si substringes la cadena vacía (\"\"), el resultado es <code>true</code>.</p><p>Si la colección de entrada está vacía, el resultado está vacío</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"upper",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "upper() : String",
    "info" : "<p>Devuelve la cadena de entrada con todos los caracteres convertidos a mayúsculas.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"lower",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "lower(): String",
    "info" : "<p>Devuelve la cadena de entrada con todos los caracteres convertidos a minúsculas.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"replace",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "replace(pattern : String, substitution : String) : String",
    "example": [
      "<code>\"abcdefg\".replace(\"cde\", \"123\") <code-comment>// \"ab123fg\"<code-comment></code>",
      "<code>\"abcdefg\".replace(\"cde\", \") <code-comment>// \"abfg\"<code-comment></code>"
    ],
    "info" : "<p>Devuelve la cadena de entrada con todas las instancias de <code>pattern</code> reemplazadas por substitución. Si la sustitución es la cadena vacía (\"\"), las instancias de <code>pattern</code> se eliminan del resultado. Si <code>pattern</code> es la cadena vacía (\"\"), cada carácter en la cadena de entrada está rodeado por la sustitución, por ejemplo, <code-function>\"abc\".replace(\",\"x\")</code-function> se convierte en \"xaxbxcx\".</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"matches",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "matches(regex : String) : Boolean",
    "info": "<p>Devuelve <code>true</code> cuando el valor coincide con la expresión regular dada. Las expresiones regulares deben funcionar de manera consistente, independientemente de cualquier configuración cultural y local específica en el entorno, deben distinguir entre mayúsculas y minúsculas, usar el modo de línea única y permitir caracteres Unicode.</p><p>Si la colección de entrada o regex está vacía, el resultado está vacío <code>( { })</code>.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"replaceMatches",
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature" : "replaceMatches(regex : String, substitution: String) : String",
    "info": "<p>Coincide con la entrada usando la expresión regular en regexy reemplaza cada coincidencia con la substitutioncadena. La sustitución puede hacer referencia a grupos de coincidencias identificados en la expresión regular.</p><p>Si la colección de entrada, regexo substitutionestán vacías, el resultado está vacío <code>( { })</code>.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"length",        
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "length() : Integer",
    "info" : "<p>Devuelve la longitud de la cadena de entrada. Si la colección de entrada está vacía <code>( { })</code>, el resultado está vacío.</p>"
  },
  { "name":"toChars",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "toChars() : collection",
    "info" : "<p>Devuelve la lista de caracteres en la cadena de entrada. Si la colección de entrada está vacía <code>( { })</code>, el resultado está vacío.</p>"
  },
  { "name":"join",          
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "join([separator: String]) : String",
    "example": [
      "<span>Devuelve home PleasantVille</span><code>(Patient.address.use | Patient.address.city).join(\"\")</code>"
    ],
    "info" : "<p>La función de unión toma una colección de cadenas y las une en una sola cadena, usando opcionalmente el separador dado.</p><p>Si la entrada está vacía, el resultado está vacío.</p><p>Si no se especifica ningún separador, las cadenas se concatenan directamente.</p>"
  },
  { "name":"split",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": " split(separator: String) : collection",
    "info" : "<p>La función de división divide una cadena de entrada singleton en una lista de cadenas, utilizando el separador dado.</p><p>Si la entrada está vacía, el resultado está vacío.</p><p>Si la cadena de entrada no contiene ninguna apariencia del separador, el resultado es la cadena de entrada.</p>"
  },
  { "name":"trim",          
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "strings",
    "signature": "trim() : String",
    "info" : "<p>La función de recorte recorta los caracteres de espacio en blanco desde el principio y el final de la cadena de entrada, con caracteres de espacio en blanco como se define en la categoría léxica de espacios en blanco .</p><p>Si la entrada está vacía, el resultado está vacío.</p>"
  },
  { "name":"encode",        
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "strings"
  },
  { "name":"decode",        
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "strings"
  },
  { "name":"abs",           
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature": "abs(): Integer | Decimal | Quantity ",
    "example": [
      "<code>(-5).abs() <code-comment>//5</code-comment></code>",
      "<code>(-5.5).abs() <code-comment>// 5.5</code-comment></code>",
      "<code>(-5.5 \"mg\").abs() <code-comment>// 5.5 \"mg\"</code-comment></code>"
    ],
    "info": "<p>Devuelve el valor absoluto de la entrada. Cuando se toma el valor absoluto de una cantidad, la unidad no cambia.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"ceiling",       
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature": "ceiling() : Integer",
    "example": [ 
      "<code>1.ceiling() <code-comment>// 1</code-comment></code>",
      "<code>1.1.ceiling() <code-comment>// 2</code-comment></code>",
      "<code>(-1.1).ceiling() <code-comment>// -1</code-comment></code>"
    ],
    "info":  "<p>Devuelve el primer número entero mayor o igual a la entrada.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"exp",           
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature": "exp() : Decimal",
    "example": [
      "<code>0.exp() <code-comment>// 1.0</code-comment></code>",
      "<code>(-0.0).exp() <code-comment>// 1.0</code-comment></code>"
    ],
    "info": "<p>Devuelve e elevado a la potencia de la entrada.</p><p>Si la colección de entrada contiene un número entero, se convertirá implícitamente a un decimal y el resultado será un decimal.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"floor",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature":"floor() : Integer",
    "example": [
      "<code>1.floor() <code-comment>// 1</code-comment></code>",
      "<code>2.1.floor() <code-comment>// 2</code-comment></code>",
      "<code>(-2.1).floor() <code-comment>// -3</code-comment></code>"
    ],
    "info": "<p>Devuelve el primer número entero menor o igual a la entrada.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"ln", 
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature":"ln(): Decimal",
    "example": [
      "<code>1.ln() <code-comment>// 0.0</code-comment></code>",
      "<code>1.0.ln() <code-comment>// 0.0</code-comment></code>"
    ],    
    "info":"<p>Devuelve el logaritmo natural de la entrada (es decir, el logaritmo en base e ).</p><p>Cuando se usa con un número entero, se convertirá implícitamente a un decimal.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"       
  },
  { "name":"log",           
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature":  "log(base: Decimal) : Decimal",
    "example":  [ 
      "<code>16.log(2) <code-comment>// 4.0<code-comment></code>","<code>100.0.log(10.0) <code-comment>// 2.0<code-comment></code>"
    ],
    "info" : "<p>Devuelve la base logarítmica del número de entrada.</p><p>Cuando se usan con números enteros, los argumentos se convertirán implícitamente a decimales.</p><p>Si base está vacía, el resultado es vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"power",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature" : "power(exponent : Integer | Decimal) : Integer | Decimal",
    "example": [
      "<code>2.power(3) <code-comment>// 8</code-comment></code>",
      "<code>2.5.power(2) <code-comment>// 6.25</code-comment></code>",
      "<code>(-1).power(0.5) <code-comment>// empty ({ })</code-comment></code>"
    ],
    "info":"<p>Eleva un número a la potencia. Si esta función se usa con números enteros, el resultado es un número entero. Si la función se usa con decimales, el resultado es un decimal. Si la función se utiliza con una combinación de entero y decimal, el entero se convierte implícitamente en decimal y el resultado es decimal.</p><p>Si la potencia no se puede representar (como el -1 elevado al 0,5), el resultado está vacío.</p><p>Si la entrada está vacía o el exponente está vacío, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"round",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature": "round([precision : Integer]) : Decimal",
    "example": [
      "<code>1.round() <code-comment>// 1</code-comment></code>",
      "<code>3.14159.round(3) <code-comment>// 3.142</code-comment></code>"
    ],
    "info":"<p>Redondea el decimal al número entero más cercano usando una redondeo tradicional (es decir, 0,5 o más se redondeará a 1). Si se especifíca, el argumento de precisión determina el lugar decimal en el que se producirá el redondeo. Si no se especifica, el redondeo se realizará de forma predeterminada con 0 decimales.</p><p>Si se especifica, el número de dígitos de precisión debe ser >= 0 o la evaluación finalizará y señalará un error al entorno de llamada.</p><p>Si la colección de entrada contiene un solo elemento de tipo Integer, se convertirá implícitamente a Decimal.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"
  },
  { "name":"sqrt",          
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature":"sqrt() : Decimal",
    "example":[
      "<code>81.sqrt() <code-comment>// 9.0<code-comment></code>",
      "<code>(-1).sqrt() <code-comment>// empty<code-comment></code>"
    ],
    "info":"<p>Devuelve la raíz cuadrada del número ingresado como decimal.</p><p>Si la raíz cuadrada no se puede representar (como la raíz cuadrada de -1), el resultado está vacío.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p><p>Tenga en cuenta que esta función equivale a elevar un número de la potencia de 0,5 usando la función <code-function>power().</code-function></p>"

  },
  { "name":"truncate",      
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"math",
    "signature": "truncate() : Integer",
    "example": [
      "<code>101.truncate() <code-comment>// 101<code-comment></code>",
      "<code>1.00000001.truncate() <code-comment>// 1<code-comment></code>",
      "<code>(-1.56).truncate() <code-comment>// -1<code-comment></code>"
    ],
    "info": "<p>Devuelve la parte entera de la entrada.</p><p>Si la colección de entrada está vacía, el resultado está vacío.</p><p>Si la colección de entrada contiene varios elementos, la evaluación de la expresión finalizará y señalará un error al entorno de llamada.</p>"

  },
  { "name":"now",           
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"datetime",
    "signature": "now(): DateTime",
    "info":"<p>Devuelve la fecha y hora actuales, incluido el desplazamiento de la zona horaria.</p>"
  },
  { "name":"today",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"datetime",
    "signature": "today() : Date",
    "info":"<p>Devuelve la fecha actual</p>"
  },
  { "name":"timeOfDay",     
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category":"datetime",
    "signature":"timeOfDay(): Time",
    "info": "<p>Devuelve la hora actual</p>"
  },
  { "name":"repeat",         
    "isVisible": true,  
    "tooltip": "Información tootltip",
    "category": "filtering",
    "signature":"repeat(projection: expression) : collection",
    "example": [
      "<span>Se repetirá la búsqueda de niños llamados contains hasta que no se encuentren nuevos nodos.</span><code>ValueSet.expansion.repeat(contains)</code>",
      "<span>Se repetirá la búsqueda de niños llamados itemhasta que no se encuentren nuevos nodos.</span><code>Questionnaire.repeat(item)</code>"
    ],
    "info": "<p>Repetirá una projección y lo agregará a la colección de salida, siempre que la proyección produzca nuevos elementos (según lo determine el operador <code>= (Equals) (=)</code>.</p><p>Esta función se puede utilizar para recorrer un árbol y seleccionar solo hijos específicos</p>"
  },
  { "name":"children",       
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "navigation"
  },
  { "name":"descendants",    
    "isVisible": false,  
    "tooltip": "Información tootltip",
    "category": "navigation"
  }     
]